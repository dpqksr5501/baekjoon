#include <iostream>
#include <vector>
#include <algorithm>

using namespace std;

int n;
vector<vector<int>> v;
vector<vector<bool>> visit;
vector<int> result;

int dx[4] = {-1, 1, 0, 0};
int dy[4] = {0, 0, -1, 1};

int dfs(int x, int y) {
    visit[x][y] = true;
    int count = 1;

    for (int i = 0; i < 4; i++) {
        int nx = x + dx[i];
        int ny = y + dy[i];

        if (nx >= 0 && nx < n && ny >= 0 && ny < n) {
            if (!visit[nx][ny] && v[nx][ny] == 1) {
                count += dfs(nx, ny);
            }
        }
    }
    return count;
}

int main() {
    cin >> n;
    v.resize(n, vector<int>(n));
    visit.resize(n, vector<bool>(n, false));

    for (int i = 0; i < n; i++) {
        string line;
        cin >> line;
        for (int j = 0; j < n; j++) {
            v[i][j] = line[j] - '0';
        }
    }

    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            if (v[i][j] == 1 && !visit[i][j]) {
                int bh = dfs(i, j);
                result.push_back(bh);
            }
        }
    }

    sort(result.begin(), result.end());

    cout << result.size() << "\n";
    for (auto& it : result) {
        cout << it << "\n";
    }

    return 0;
}
